{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Downloads\\\\input-validation\\\\src\\\\input.js\";\nimport React from 'react';\nimport { validate } from './validators';\nimport { useState, useRef } from 'react';\nconst INPUT_STATES = {\n  UNTOUCHED: 'UNTOUCHED',\n  VALID: 'VALID',\n  INVALID: 'INVALID'\n};\n\nconst Input = props => {\n  let status = INPUT_STATES.UNTOUCHED;\n  const [value, setValue] = useState('');\n  const myref = useRef();\n  const {\n    type,\n    label,\n    id,\n    validators,\n    errorText\n  } = props;\n  validate(value, validators);\n\n  const focusHandler = () => {\n    if (validate(value, validators) === false) {\n      status = INPUT_STATES.INVALID;\n    }\n\n    if (validate(value, validators) === true) {\n      status = INPUT_STATES.VALID;\n    }\n  }; // const[status,setStatus]=useState('')\n\n\n  console.log(myref.current);\n  return React.createElement(\"div\", {\n    className: `form-input ${status === INPUT_STATES.INVALID && 'form-input--invalid'}`,\n    \"data-testid\": \"form-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, label), React.createElement(\"input\", {\n    onFocus: focusHandler,\n    value: value,\n    type: type,\n    id: id,\n    onChange: e => setValue(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), status === INPUT_STATES.INVALID && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/input-validation/src/input.js"],"names":["React","validate","useState","useRef","INPUT_STATES","UNTOUCHED","VALID","INVALID","Input","props","status","value","setValue","myref","type","label","id","validators","errorText","focusHandler","console","log","current","e","target"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,cAAvB;AACA,SAASC,QAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,WADQ;AAEnBC,EAAAA,KAAK,EAAE,OAFY;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;;AAMA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB,MAAIC,MAAM,GAACN,YAAY,CAACC,SAAxB;AACF,QAAK,CAACM,KAAD,EAAOC,QAAP,IAAiBV,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAMW,KAAK,GAACV,MAAM,EAAlB;AACC,QAAK;AAACW,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA,EAAZ;AAAeC,IAAAA,UAAf;AAA0BC,IAAAA;AAA1B,MAAqCT,KAA1C;AACAR,EAAAA,QAAQ,CAACU,KAAD,EAAOM,UAAP,CAAR;;AAED,QAAME,YAAY,GAAC,MAAI;AACvB,QAAGlB,QAAQ,CAACU,KAAD,EAAOM,UAAP,CAAR,KAA6B,KAAhC,EAAsC;AACpCP,MAAAA,MAAM,GAACN,YAAY,CAACG,OAApB;AACA;;AACD,QAAGN,QAAQ,CAACU,KAAD,EAAOM,UAAP,CAAR,KAA6B,IAAhC,EAAqC;AACpCP,MAAAA,MAAM,GAAEN,YAAY,CAACE,KAArB;AACA;AACD,GAPD,CAPuB,CAevB;;;AAGAc,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,OAAlB;AAGG,SACE;AAAK,IAAA,SAAS,EAAG,cAAaZ,MAAM,KAAGN,YAAY,CAACG,OAAtB,IAA+B,qBAAsB,EAAnF;AAAsF,mBAAY,YAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQQ,KAAR,CADF,EAEE;AAAO,IAAA,OAAO,EAAEI,YAAhB;AAA8B,IAAA,KAAK,EAAER,KAArC;AAA4C,IAAA,IAAI,EAAEG,IAAlD;AAAwD,IAAA,EAAE,EAAEE,EAA5D;AAAgE,IAAA,QAAQ,EAAGO,CAAD,IAAKX,QAAQ,CAACW,CAAC,CAACC,MAAF,CAASb,KAAV,CAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAIGD,MAAM,KAAGN,YAAY,CAACG,OAAtB,IAKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIW,SAAJ,CATD,CADF;AAmBF,CAxCD;;AA0CA,eAAeV,KAAf","sourcesContent":["import React from 'react';\nimport {validate} from './validators';\nimport { useState,useRef } from 'react';\n\nconst INPUT_STATES = {\n  UNTOUCHED: 'UNTOUCHED',\n  VALID: 'VALID',\n  INVALID: 'INVALID'\n};\n\nconst Input = props => {\n  let status=INPUT_STATES.UNTOUCHED\nconst[value,setValue]=useState('')\nconst myref=useRef()\n const{type,label,id,validators,errorText}=props\n validate(value,validators)\n\nconst focusHandler=()=>{\nif(validate(value,validators)===false){\n  status=INPUT_STATES.INVALID\n }\n if(validate(value,validators)===true){\n  status= INPUT_STATES.VALID\n }\n}\n// const[status,setStatus]=useState('')\n\n \nconsole.log(myref.current\n)\n \n   return (\n     <div className={`form-input ${status===INPUT_STATES.INVALID&&'form-input--invalid'}`} data-testid=\"form-input\">\n       <label>{label}</label>\n       <input onFocus={focusHandler} value={value} type={type} id={id} onChange={(e)=>setValue(e.target.value)} />\n\n       {status===INPUT_STATES.INVALID&&(\n\n     \n\n        \n      <p>{errorText}</p>\n      \n\n\n       \n       )}\n       \n     </div>\n   )\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}