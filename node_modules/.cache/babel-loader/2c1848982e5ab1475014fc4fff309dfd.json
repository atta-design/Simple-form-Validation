{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Downloads\\\\input-validation\\\\src\\\\input.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { validate } from \"./validators\";\nconst INPUT_STATES = {\n  UNTOUCHED: \"UNTOUCHED\",\n  VALID: \"VALID\",\n  INVALID: \"INVALID\"\n};\n\nconst Input = props => {\n  const [value, setValue] = useState(\"\");\n  const [status, setStatus] = useState(INPUT_STATES.UNTOUCHED);\n  const {\n    type,\n    label,\n    id,\n    validators,\n    errorText\n  } = props;\n\n  const focusHandler = () => {\n    if (validate(value, validators) === false) {\n      setStatus(INPUT_STATES.INVALID);\n    }\n\n    if (validate(value, validators) === true) {\n      setStatus(INPUT_STATES.VALID);\n    }\n\n    validate(value, validators);\n  };\n\n  useEffect(() => {\n    if (status !== INPUT_STATES.UNTOUCHED) {\n      if (validate(value, validators) === false) {\n        setStatus(INPUT_STATES.INVALID);\n      }\n\n      if (validate(value, validators) === true) {\n        setStatus(INPUT_STATES.VALID);\n      }\n    }\n  });\n  console.log(status);\n  return React.createElement(\"div\", {\n    className: `form-input ${status === INPUT_STATES.INVALID && \"form-input--invalid\"}`,\n    \"data-testid\": \"form-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, label), React.createElement(\"input\", {\n    onBlur: focusHandler,\n    value: value,\n    type: type,\n    id: id,\n    onChange: e => setValue(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), status === INPUT_STATES.INVALID && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/input-validation/src/input.js"],"names":["React","useEffect","useState","validate","INPUT_STATES","UNTOUCHED","VALID","INVALID","Input","props","value","setValue","status","setStatus","type","label","id","validators","errorText","focusHandler","console","log","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,cAAzB;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,WADQ;AAEnBC,EAAAA,KAAK,EAAE,OAFY;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;;AAMA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAACE,YAAY,CAACC,SAAd,CAApC;AACA,QAAM;AAAES,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,EAAf;AAAmBC,IAAAA,UAAnB;AAA+BC,IAAAA;AAA/B,MAA6CT,KAAnD;;AAEA,QAAMU,YAAY,GAAG,MAAM;AACzB,QAAIhB,QAAQ,CAACO,KAAD,EAAQO,UAAR,CAAR,KAAgC,KAApC,EAA2C;AACzCJ,MAAAA,SAAS,CAACT,YAAY,CAACG,OAAd,CAAT;AACD;;AACD,QAAIJ,QAAQ,CAACO,KAAD,EAAQO,UAAR,CAAR,KAAgC,IAApC,EAA0C;AACxCJ,MAAAA,SAAS,CAACT,YAAY,CAACE,KAAd,CAAT;AACD;;AACDH,IAAAA,QAAQ,CAACO,KAAD,EAAQO,UAAR,CAAR;AAED,GATD;;AAWAhB,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGW,MAAM,KAAGR,YAAY,CAACC,SAAzB,EAAmC;AACnC,UAAIF,QAAQ,CAACO,KAAD,EAAQO,UAAR,CAAR,KAAgC,KAApC,EAA2C;AACzCJ,QAAAA,SAAS,CAACT,YAAY,CAACG,OAAd,CAAT;AACD;;AACD,UAAIJ,QAAQ,CAACO,KAAD,EAAQO,UAAR,CAAR,KAAgC,IAApC,EAA0C;AACxCJ,QAAAA,SAAS,CAACT,YAAY,CAACE,KAAd,CAAT;AACD;AAAC;AACH,GARQ,CAAT;AASFc,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACE,SACE;AACE,IAAA,SAAS,EAAG,cACVA,MAAM,KAAKR,YAAY,CAACG,OAAxB,IAAmC,qBACpC,EAHH;AAIE,mBAAY,YAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAO,IAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBQ,KAAnB,CANF,EAOE;AACE,IAAA,MAAM,EAAEI,YADV;AAEE,IAAA,KAAK,EAAET,KAFT;AAGE,IAAA,IAAI,EAAEI,IAHR;AAIE,IAAA,EAAE,EAAEE,EAJN;AAKE,IAAA,QAAQ,EAAGM,CAAD,IAAOX,QAAQ,CAACW,CAAC,CAACC,MAAF,CAASb,KAAV,CAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAeGE,MAAM,KAAKR,YAAY,CAACG,OAAxB,IAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIW,SAAJ,CAftC,CADF;AAmBD,CA7CD;;AA+CA,eAAeV,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { validate } from \"./validators\";\n\n\nconst INPUT_STATES = {\n  UNTOUCHED: \"UNTOUCHED\",\n  VALID: \"VALID\",\n  INVALID: \"INVALID\",\n};\n\nconst Input = (props) => {\n  const [value, setValue] = useState(\"\");\n  const [status, setStatus] = useState(INPUT_STATES.UNTOUCHED);\n  const { type, label, id, validators, errorText } = props;\n\n  const focusHandler = () => {\n    if (validate(value, validators) === false) {\n      setStatus(INPUT_STATES.INVALID);\n    }\n    if (validate(value, validators) === true) {\n      setStatus(INPUT_STATES.VALID);\n    }\n    validate(value, validators);\n\n  };\n\n  useEffect(()=>{\n    if(status!==INPUT_STATES.UNTOUCHED){\n    if (validate(value, validators) === false) {\n      setStatus(INPUT_STATES.INVALID);\n    }\n    if (validate(value, validators) === true) {\n      setStatus(INPUT_STATES.VALID);\n    }}\n  })\nconsole.log(status)\n  return (\n    <div\n      className={`form-input ${\n        status === INPUT_STATES.INVALID && \"form-input--invalid\"\n      }`}\n      data-testid=\"form-input\"\n    >\n      <label htmlFor=\"\">{label}</label>\n      <input\n        onBlur={focusHandler}\n        value={value}\n        type={type}\n        id={id}\n        onChange={(e) => setValue(e.target.value)}\n      />\n\n      {status === INPUT_STATES.INVALID && <p>{errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}