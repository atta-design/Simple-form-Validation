{"ast":null,"code":"export const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nexport const VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nexport const VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nexport const VALIDATOR_TYPE_MIN = 'MIN';\nexport const VALIDATOR_TYPE_MAX = 'MAX';\nexport const VALIDATOR_TYPE_EMAIL = 'EMAIL';\nexport const VALIDATOR_REQUIRE = () => ({\n  type: VALIDATOR_TYPE_REQUIRE\n});\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({\n  type: VALIDATOR_TYPE_MIN,\n  val: val\n});\nexport const VALIDATOR_MAX = val => ({\n  type: VALIDATOR_TYPE_MAX,\n  val: val\n});\nexport const VALIDATOR_EMAIL = () => ({\n  type: VALIDATOR_TYPE_EMAIL\n});\nexport const validate = (value, validators) => {\n  co;\n  let isValid = true;\n\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n\n  return isValid;\n};","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/input-validation/src/validators.js"],"names":["VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_MIN","VALIDATOR_TYPE_MAX","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_MAXLENGTH","VALIDATOR_MIN","VALIDATOR_MAX","VALIDATOR_EMAIL","validate","value","validators","co","isValid","validator","trim","length","test"],"mappings":"AAAA,OAAO,MAAMA,sBAAsB,GAAG,SAA/B;AACP,OAAO,MAAMC,wBAAwB,GAAG,WAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAG,WAAjC;AACP,OAAO,MAAMC,kBAAkB,GAAG,KAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,KAA3B;AACP,OAAO,MAAMC,oBAAoB,GAAG,OAA7B;AAEP,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AAACC,EAAAA,IAAI,EAAEP;AAAP,CAAP,CAA1B;AACP,OAAO,MAAMQ,mBAAmB,GAAGC,GAAG,KAAK;AACzCF,EAAAA,IAAI,EAAEN,wBADmC;AAEzCQ,EAAAA,GAAG,EAAEA;AAFoC,CAAL,CAA/B;AAIP,OAAO,MAAMC,mBAAmB,GAAGD,GAAG,KAAK;AACzCF,EAAAA,IAAI,EAAEL,wBADmC;AAEzCO,EAAAA,GAAG,EAAEA;AAFoC,CAAL,CAA/B;AAIP,OAAO,MAAME,aAAa,GAAGF,GAAG,KAAK;AAACF,EAAAA,IAAI,EAAEJ,kBAAP;AAA2BM,EAAAA,GAAG,EAAEA;AAAhC,CAAL,CAAzB;AACP,OAAO,MAAMG,aAAa,GAAGH,GAAG,KAAK;AAACF,EAAAA,IAAI,EAAEH,kBAAP;AAA2BK,EAAAA,GAAG,EAAEA;AAAhC,CAAL,CAAzB;AACP,OAAO,MAAMI,eAAe,GAAG,OAAO;AAACN,EAAAA,IAAI,EAAEF;AAAP,CAAP,CAAxB;AAEP,OAAO,MAAMS,QAAQ,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AAC7CC,EAAAA,EAAE;AACF,MAAIC,OAAO,GAAG,IAAd;;AACA,OAAK,MAAMC,SAAX,IAAwBH,UAAxB,EAAoC;AAClC,QAAIG,SAAS,CAACZ,IAAV,KAAmBP,sBAAvB,EAA+C;AAC7CkB,MAAAA,OAAO,GAAGA,OAAO,IAAIH,KAAK,CAACK,IAAN,GAAaC,MAAb,GAAsB,CAA3C;AACD;;AACD,QAAIF,SAAS,CAACZ,IAAV,KAAmBN,wBAAvB,EAAiD;AAC/CiB,MAAAA,OAAO,GAAGA,OAAO,IAAIH,KAAK,CAACK,IAAN,GAAaC,MAAb,IAAuBF,SAAS,CAACV,GAAtD;AACD;;AACD,QAAIU,SAAS,CAACZ,IAAV,KAAmBL,wBAAvB,EAAiD;AAC/CgB,MAAAA,OAAO,GAAGA,OAAO,IAAIH,KAAK,CAACK,IAAN,GAAaC,MAAb,IAAuBF,SAAS,CAACV,GAAtD;AACD;;AACD,QAAIU,SAAS,CAACZ,IAAV,KAAmBJ,kBAAvB,EAA2C;AACzCe,MAAAA,OAAO,GAAGA,OAAO,IAAI,CAACH,KAAD,IAAUI,SAAS,CAACV,GAAzC;AACD;;AACD,QAAIU,SAAS,CAACZ,IAAV,KAAmBH,kBAAvB,EAA2C;AACzCc,MAAAA,OAAO,GAAGA,OAAO,IAAI,CAACH,KAAD,IAAUI,SAAS,CAACV,GAAzC;AACD;;AACD,QAAIU,SAAS,CAACZ,IAAV,KAAmBF,oBAAvB,EAA6C;AAC3Ca,MAAAA,OAAO,GAAGA,OAAO,IAAI,iBAAiBI,IAAjB,CAAsBP,KAAtB,CAArB;AACD;AACF;;AACD,SAAOG,OAAP;AACD,CAxBM","sourcesContent":["export const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nexport const VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nexport const VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nexport const VALIDATOR_TYPE_MIN = 'MIN';\nexport const VALIDATOR_TYPE_MAX = 'MAX';\nexport const VALIDATOR_TYPE_EMAIL = 'EMAIL';\n\nexport const VALIDATOR_REQUIRE = () => ({type: VALIDATOR_TYPE_REQUIRE});\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({type: VALIDATOR_TYPE_MIN, val: val});\nexport const VALIDATOR_MAX = val => ({type: VALIDATOR_TYPE_MAX, val: val});\nexport const VALIDATOR_EMAIL = () => ({type: VALIDATOR_TYPE_EMAIL});\n\nexport const validate = (value, validators) => {\n  co\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"]},"metadata":{},"sourceType":"module"}