{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Downloads\\\\input-validation\\\\src\\\\input.js\";\nimport React from 'react';\nimport { validate } from './validators';\nimport { useState, useRef } from 'react';\nconst INPUT_STATES = {\n  UNTOUCHED: 'UNTOUCHED',\n  VALID: 'VALID',\n  INVALID: 'INVALID'\n};\n\nconst Input = props => {\n  const [value, setValue] = useState('');\n  const myref = useRef();\n\n  const focusHandler = () => {\n    if (validate(value, validators) === false) {\n      status = INPUT_STATES.INVALID;\n    }\n\n    if (validate(value, validators) === true) {\n      status = INPUT_STATES.VALID;\n    }\n  }; // const[status,setStatus]=useState('')\n\n\n  let status = INPUT_STATES.UNTOUCHED;\n  const {\n    type,\n    label,\n    id,\n    validators,\n    errorText\n  } = props;\n  validate(value, validators);\n  console.log(myref.current);\n  return React.createElement(\"div\", {\n    className: `form-input ${status === INPUT_STATES.INVALID && 'form-input--invalid'}`,\n    \"data-testid\": \"form-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, label), React.createElement(\"input\", {\n    onFocus: focusHandler,\n    value: value,\n    type: type,\n    id: id,\n    onChange: e => setValue(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), status === INPUT_STATES.INVALID && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/input-validation/src/input.js"],"names":["React","validate","useState","useRef","INPUT_STATES","UNTOUCHED","VALID","INVALID","Input","props","value","setValue","myref","focusHandler","validators","status","type","label","id","errorText","console","log","current","e","target"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,cAAvB;AACA,SAASC,QAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,WADQ;AAEnBC,EAAAA,KAAK,EAAE,OAFY;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;;AAMA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACvB,QAAK,CAACC,KAAD,EAAOC,QAAP,IAAiBT,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAMU,KAAK,GAACT,MAAM,EAAlB;;AAEA,QAAMU,YAAY,GAAC,MAAI;AACvB,QAAGZ,QAAQ,CAACS,KAAD,EAAOI,UAAP,CAAR,KAA6B,KAAhC,EAAsC;AACpCC,MAAAA,MAAM,GAACX,YAAY,CAACG,OAApB;AACA;;AACD,QAAGN,QAAQ,CAACS,KAAD,EAAOI,UAAP,CAAR,KAA6B,IAAhC,EAAqC;AACpCC,MAAAA,MAAM,GAAEX,YAAY,CAACE,KAArB;AACA;AACD,GAPD,CAJuB,CAYvB;;;AACA,MAAIS,MAAM,GAACX,YAAY,CAACC,SAAxB;AACE,QAAK;AAACW,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA,EAAZ;AAAeJ,IAAAA,UAAf;AAA0BK,IAAAA;AAA1B,MAAqCV,KAA1C;AACFR,EAAAA,QAAQ,CAACS,KAAD,EAAOI,UAAP,CAAR;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACU,OAAlB;AAGG,SACE;AAAK,IAAA,SAAS,EAAG,cAAaP,MAAM,KAAGX,YAAY,CAACG,OAAtB,IAA+B,qBAAsB,EAAnF;AAAsF,mBAAY,YAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQU,KAAR,CADF,EAEE;AAAO,IAAA,OAAO,EAAEJ,YAAhB;AAA8B,IAAA,KAAK,EAAEH,KAArC;AAA4C,IAAA,IAAI,EAAEM,IAAlD;AAAwD,IAAA,EAAE,EAAEE,EAA5D;AAAgE,IAAA,QAAQ,EAAGK,CAAD,IAAKZ,QAAQ,CAACY,CAAC,CAACC,MAAF,CAASd,KAAV,CAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAIGK,MAAM,KAAGX,YAAY,CAACG,OAAtB,IAKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIY,SAAJ,CATD,CADF;AAmBF,CAtCD;;AAwCA,eAAeX,KAAf","sourcesContent":["import React from 'react';\nimport {validate} from './validators';\nimport { useState,useRef } from 'react';\n\nconst INPUT_STATES = {\n  UNTOUCHED: 'UNTOUCHED',\n  VALID: 'VALID',\n  INVALID: 'INVALID'\n};\n\nconst Input = props => {\nconst[value,setValue]=useState('')\nconst myref=useRef()\n\nconst focusHandler=()=>{\nif(validate(value,validators)===false){\n  status=INPUT_STATES.INVALID\n }\n if(validate(value,validators)===true){\n  status= INPUT_STATES.VALID\n }\n}\n// const[status,setStatus]=useState('')\nlet status=INPUT_STATES.UNTOUCHED\n  const{type,label,id,validators,errorText}=props\nvalidate(value,validators)\nconsole.log(myref.current\n)\n \n   return (\n     <div className={`form-input ${status===INPUT_STATES.INVALID&&'form-input--invalid'}`} data-testid=\"form-input\">\n       <label>{label}</label>\n       <input onFocus={focusHandler} value={value} type={type} id={id} onChange={(e)=>setValue(e.target.value)} />\n\n       {status===INPUT_STATES.INVALID&&(\n\n     \n\n        \n      <p>{errorText}</p>\n      \n\n\n       \n       )}\n       \n     </div>\n   )\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}